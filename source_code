#include <iostream>
#include <set>
#include <vector>
#include <algorithm>

using namespace std;

void displaySet(const set<int>& s) {
    cout << "{ ";
    for (const auto& elem : s) {
        cout << elem << " ";
    }
    cout << "}" << endl;
}

set<int> unionSets(const set<int>& A, const set<int>& B) {
    set<int> result = A;
    result.insert(B.begin(), B.end());
    return result;
}

set<int> intersectionSets(const set<int>& A, const set<int>& B) {
    set<int> result;
    for (const auto& elem : A) {
        if (B.find(elem) != B.end()) {
            result.insert(elem);
        }
    }
    return result;
}

set<int> differenceSets(const set<int>& A, const set<int>& B) {
    set<int> result;
    for (const auto& elem : A) {
        if (B.find(elem) == B.end()) {
            result.insert(elem);
        }
    }
    return result;
}

bool isSubset(const set<int>& A, const set<int>& B) {
    for (const auto& elem : A) {
        if (B.find(elem) == B.end()) {
            return false;
        }
    }
    return true;
}

int main() {
    set<int> A, B;
    int n, element;

    cout << "Enter number of elements in set A: ";
    cin >> n;
    cout << "Enter elements of set A: ";
    for (int i = 0; i < n; ++i) {
        cin >> element;
        A.insert(element);
    }

    cout << "Enter number of elements in set B: ";
    cin >> n;
    cout << "Enter elements of set B: ";
    for (int i = 0; i < n; ++i) {
        cin >> element;
        B.insert(element);
    }

    cout << "Set A: ";
    displaySet(A);
    cout << "Set B: ";
    displaySet(B);

    cout << "Union of A and B: ";
    displaySet(unionSets(A, B));

    cout << "Intersection of A and B: ";
    displaySet(intersectionSets(A, B));

    cout << "Difference (A - B): ";
    displaySet(differenceSets(A, B));

    cout << "Difference (B - A): ";
    displaySet(differenceSets(B, A));

    cout << "Is A a subset of B? " << (isSubset(A, B) ? "Yes" : "No") << endl;
    cout << "Is B a subset of A? " << (isSubset(B, A) ? "Yes" : "No") << endl;

    return 0;
}
